/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ICampaign {
  export type CampaignsInfoStruct = {
    name: string;
    description: string;
    baseURI: string;
    timeStart: BigNumberish;
    timeEnd: BigNumberish;
    expireClaim: BigNumberish;
    nftId: BigNumberish[];
  };

  export type CampaignsInfoStructOutput = [
    name: string,
    description: string,
    baseURI: string,
    timeStart: bigint,
    timeEnd: bigint,
    expireClaim: bigint,
    nftId: bigint[]
  ] & {
    name: string;
    description: string;
    baseURI: string;
    timeStart: bigint;
    timeEnd: bigint;
    expireClaim: bigint;
    nftId: bigint[];
  };
}

export interface CampaignInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addNftToCampaign"
      | "admins"
      | "bytes32ToAddress"
      | "campaigns"
      | "changeRootAdmin"
      | "createCampaign"
      | "getAllCampaign"
      | "getCampaignByPeriod"
      | "getCampaignInfo"
      | "hasCampaignRunning"
      | "isAdmin"
      | "isRunningCampaign"
      | "removeAdmin"
      | "rootAdmin"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RootAdminChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addNftToCampaign",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "bytes32ToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRootAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignByPeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCampaignRunning",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRunningCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "rootAdmin", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNftToCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRootAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignByPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCampaignRunning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRunningCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootAdmin", data: BytesLike): Result;
}

export namespace RootAdminChangedEvent {
  export type InputTuple = [oldRoot: AddressLike, newRoot: AddressLike];
  export type OutputTuple = [oldRoot: string, newRoot: string];
  export interface OutputObject {
    oldRoot: string;
    newRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Campaign extends BaseContract {
  connect(runner?: ContractRunner | null): Campaign;
  waitForDeployment(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  addNftToCampaign: TypedContractMethod<
    [_campaignId: BigNumberish, _nftId: BigNumberish],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bytes32ToAddress: TypedContractMethod<
    [_address: BytesLike],
    [string],
    "view"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint] & {
        name: string;
        description: string;
        baseURI: string;
        timeStart: bigint;
        timeEnd: bigint;
        expireClaim: bigint;
      }
    ],
    "view"
  >;

  changeRootAdmin: TypedContractMethod<
    [_newRootAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  createCampaign: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _baseURI: string,
      _timeStart: BigNumberish,
      _timeEnd: BigNumberish,
      _expireClaim: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAllCampaign: TypedContractMethod<[], [bigint[]], "view">;

  getCampaignByPeriod: TypedContractMethod<
    [period: string],
    [bigint[]],
    "view"
  >;

  getCampaignInfo: TypedContractMethod<
    [_campaignId: BigNumberish],
    [ICampaign.CampaignsInfoStructOutput],
    "view"
  >;

  hasCampaignRunning: TypedContractMethod<
    [_timeStart: BigNumberish, _timeEnd: BigNumberish],
    [boolean],
    "view"
  >;

  isAdmin: TypedContractMethod<[_admin: AddressLike], [boolean], "view">;

  isRunningCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [boolean],
    "view"
  >;

  removeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  rootAdmin: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addNftToCampaign"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _nftId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bytes32ToAddress"
  ): TypedContractMethod<[_address: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint] & {
        name: string;
        description: string;
        baseURI: string;
        timeStart: bigint;
        timeEnd: bigint;
        expireClaim: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeRootAdmin"
  ): TypedContractMethod<[_newRootAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _baseURI: string,
      _timeStart: BigNumberish,
      _timeEnd: BigNumberish,
      _expireClaim: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllCampaign"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignByPeriod"
  ): TypedContractMethod<[period: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignInfo"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [ICampaign.CampaignsInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasCampaignRunning"
  ): TypedContractMethod<
    [_timeStart: BigNumberish, _timeEnd: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRunningCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rootAdmin"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "RootAdminChanged"
  ): TypedContractEvent<
    RootAdminChangedEvent.InputTuple,
    RootAdminChangedEvent.OutputTuple,
    RootAdminChangedEvent.OutputObject
  >;

  filters: {
    "RootAdminChanged(address,address)": TypedContractEvent<
      RootAdminChangedEvent.InputTuple,
      RootAdminChangedEvent.OutputTuple,
      RootAdminChangedEvent.OutputObject
    >;
    RootAdminChanged: TypedContractEvent<
      RootAdminChangedEvent.InputTuple,
      RootAdminChangedEvent.OutputTuple,
      RootAdminChangedEvent.OutputObject
    >;
  };
}
