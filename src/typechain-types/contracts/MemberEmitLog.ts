/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MemberEmitLogInterface extends Interface {
  getFunction(
    nameOrSignature: "emitMemberLog" | "emitPointLog"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "WantsToAddPoint" | "WantsToUpgrade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emitMemberLog",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPointLog",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "emitMemberLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPointLog",
    data: BytesLike
  ): Result;
}

export namespace WantsToAddPointEvent {
  export type InputTuple = [
    _customerAddress: AddressLike,
    _point: BigNumberish,
    _campaignId: BigNumberish
  ];
  export type OutputTuple = [
    _customerAddress: string,
    _point: bigint,
    _campaignId: bigint
  ];
  export interface OutputObject {
    _customerAddress: string;
    _point: bigint;
    _campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WantsToUpgradeEvent {
  export type InputTuple = [
    _customerAddress: AddressLike,
    _pointItemId: BigNumberish,
    _request: string
  ];
  export type OutputTuple = [
    _customerAddress: string,
    _pointItemId: bigint,
    _request: string
  ];
  export interface OutputObject {
    _customerAddress: string;
    _pointItemId: bigint;
    _request: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MemberEmitLog extends BaseContract {
  connect(runner?: ContractRunner | null): MemberEmitLog;
  waitForDeployment(): Promise<this>;

  interface: MemberEmitLogInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emitMemberLog: TypedContractMethod<
    [_target: AddressLike, _pointItemId: BigNumberish, _request: string],
    [void],
    "nonpayable"
  >;

  emitPointLog: TypedContractMethod<
    [_target: AddressLike, _point: BigNumberish, _campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emitMemberLog"
  ): TypedContractMethod<
    [_target: AddressLike, _pointItemId: BigNumberish, _request: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitPointLog"
  ): TypedContractMethod<
    [_target: AddressLike, _point: BigNumberish, _campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "WantsToAddPoint"
  ): TypedContractEvent<
    WantsToAddPointEvent.InputTuple,
    WantsToAddPointEvent.OutputTuple,
    WantsToAddPointEvent.OutputObject
  >;
  getEvent(
    key: "WantsToUpgrade"
  ): TypedContractEvent<
    WantsToUpgradeEvent.InputTuple,
    WantsToUpgradeEvent.OutputTuple,
    WantsToUpgradeEvent.OutputObject
  >;

  filters: {
    "WantsToAddPoint(address,uint256,uint256)": TypedContractEvent<
      WantsToAddPointEvent.InputTuple,
      WantsToAddPointEvent.OutputTuple,
      WantsToAddPointEvent.OutputObject
    >;
    WantsToAddPoint: TypedContractEvent<
      WantsToAddPointEvent.InputTuple,
      WantsToAddPointEvent.OutputTuple,
      WantsToAddPointEvent.OutputObject
    >;

    "WantsToUpgrade(address,uint256,string)": TypedContractEvent<
      WantsToUpgradeEvent.InputTuple,
      WantsToUpgradeEvent.OutputTuple,
      WantsToUpgradeEvent.OutputObject
    >;
    WantsToUpgrade: TypedContractEvent<
      WantsToUpgradeEvent.InputTuple,
      WantsToUpgradeEvent.OutputTuple,
      WantsToUpgradeEvent.OutputObject
    >;
  };
}
