/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ExpiredClaim,
  ExpiredClaimInterface,
} from "../../contracts/ExpiredClaim";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_campaignAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pointAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "campaign",
    outputs: [
      {
        internalType: "contract ICampaign",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "interval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "point",
    outputs: [
      {
        internalType: "contract ICryptoCoffPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateExpireClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161085b38038061085b83398101604081905261002f91610087565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493909416921691909117909155426002556080526100c3565b80516001600160a01b038116811461008257600080fd5b919050565b60008060006060848603121561009c57600080fd5b6100a58461006b565b92506100b36020850161006b565b9150604084015190509250925092565b60805161077e6100dd600039600060c5015261077e6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a2ae39a1461005c5780632ba9fcd5146100665780633f3b3b2714610096578063811e539c146100ad578063947a36fb146100c0575b600080fd5b6100646100e7565b005b600154610079906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f60025481565b60405190815260200161008d565b600054610079906001600160a01b031681565b61009f7f000000000000000000000000000000000000000000000000000000000000000081565b6000805460405163f10bb1bb60e01b81526001600160a01b039091169063f10bb1bb9061012f906004016020808252600490820152631c185cdd60e21b604082015260600190565b600060405180830381865afa15801561014c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610174919081019061049b565b905060005b81518110156103a7576000805483516001600160a01b039091169063e38e2b82908590859081106101ac576101ac6104d8565b60200260200101516040518263ffffffff1660e01b81526004016101d291815260200190565b600060405180830381865afa1580156101ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102179190810190610576565b9050428160a00151826080015161022e9190610683565b10156103945760c081015160005b81518110156103915760015482516001600160a01b03909116906398438ac79084908490811061026e5761026e6104d8565b60200260200101516040518263ffffffff1660e01b815260040161029491815260200190565b602060405180830381865afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d5919061069c565b1561037f5760015482516001600160a01b0390911690632ce8d6fe90849084908110610303576103036104d8565b6020026020010151856040015160405160200161032091906106c5565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161034c9291906106f5565b600060405180830381600087803b15801561036657600080fd5b505af115801561037a573d6000803e3d6000fd5b505050505b806103898161072f565b91505061023c565b50505b508061039f8161072f565b915050610179565b5050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156103e4576103e46103ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610413576104136103ab565b604052919050565b600082601f83011261042c57600080fd5b8151602067ffffffffffffffff821115610448576104486103ab565b8160051b6104578282016103ea565b928352848101820192828101908785111561047157600080fd5b83870192505b8483101561049057825182529183019190830190610477565b979650505050505050565b6000602082840312156104ad57600080fd5b815167ffffffffffffffff8111156104c457600080fd5b6104d08482850161041b565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60005b838110156105095781810151838201526020016104f1565b50506000910152565b600082601f83011261052357600080fd5b815167ffffffffffffffff81111561053d5761053d6103ab565b610550601f8201601f19166020016103ea565b81815284602083860101111561056557600080fd5b6104d08260208301602087016104ee565b60006020828403121561058857600080fd5b815167ffffffffffffffff808211156105a057600080fd5b9083019060e082860312156105b457600080fd5b6105bc6103c1565b8251828111156105cb57600080fd5b6105d787828601610512565b8252506020830151828111156105ec57600080fd5b6105f887828601610512565b60208301525060408301518281111561061057600080fd5b61061c87828601610512565b604083015250606083015160608201526080830151608082015260a083015160a082015260c08301518281111561065257600080fd5b61065e8782860161041b565b60c08301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106965761069661066d565b92915050565b6000602082840312156106ae57600080fd5b815180151581146106be57600080fd5b9392505050565b600082516106d78184602087016104ee565b6b32bc3834b932b2173539b7b760a11b920191825250600c01919050565b828152604060208201526000825180604084015261071a8160608501602087016104ee565b601f01601f1916919091016060019392505050565b6000600182016107415761074161066d565b506001019056fea26469706673582212206e08bce1d9cd0eac637eb5a91c2f3c97d1697b5ef5933831a45ebeb12a646b3864736f6c63430008140033";

type ExpiredClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExpiredClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExpiredClaim__factory extends ContractFactory {
  constructor(...args: ExpiredClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _campaignAddress: AddressLike,
    _pointAddress: AddressLike,
    _interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _campaignAddress,
      _pointAddress,
      _interval,
      overrides || {}
    );
  }
  override deploy(
    _campaignAddress: AddressLike,
    _pointAddress: AddressLike,
    _interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _campaignAddress,
      _pointAddress,
      _interval,
      overrides || {}
    ) as Promise<
      ExpiredClaim & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExpiredClaim__factory {
    return super.connect(runner) as ExpiredClaim__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExpiredClaimInterface {
    return new Interface(_abi) as ExpiredClaimInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExpiredClaim {
    return new Contract(address, _abi, runner) as unknown as ExpiredClaim;
  }
}
