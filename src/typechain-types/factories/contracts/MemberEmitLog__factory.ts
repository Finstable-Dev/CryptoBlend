/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MemberEmitLog,
  MemberEmitLogInterface,
} from "../../contracts/MemberEmitLog";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_customerAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_point",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_campaignId",
        type: "uint256",
      },
    ],
    name: "WantsToAddPoint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_customerAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_pointItemId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "string",
        name: "_request",
        type: "string",
      },
    ],
    name: "WantsToUpgrade",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_pointItemId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_request",
        type: "string",
      },
    ],
    name: "emitMemberLog",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_point",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_campaignId",
        type: "uint256",
      },
    ],
    name: "emitPointLog",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610285806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639279d1161461003b578063eaea515614610050575b600080fd5b61004e61004936600461010c565b610063565b005b61004e61005e366004610155565b6100a0565b8082846001600160a01b03167ff341621f87c936980aec0c6fc762a1b2d7d02e42aa6c086bd49b85cb5456963560405160405180910390a4505050565b806040516100ae9190610220565b6040519081900381209083906001600160a01b038616907f5e070ccff39bd41457754569e80b3dec35ac770058e18a0c7b054eadb7dba30c90600090a4505050565b80356001600160a01b038116811461010757600080fd5b919050565b60008060006060848603121561012157600080fd5b61012a846100f0565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561016a57600080fd5b610173846100f0565b925060208401359150604084013567ffffffffffffffff8082111561019757600080fd5b818601915086601f8301126101ab57600080fd5b8135818111156101bd576101bd61013f565b604051601f8201601f19908116603f011681019083821181831017156101e5576101e561013f565b816040528281528960208487010111156101fe57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000825160005b818110156102415760208186018101518583015201610227565b50600092019182525091905056fea2646970667358221220c15aab91dd1451a123efb4f15dd89271e1ae833f947e80346993ab271376d0c964736f6c63430008140033";

type MemberEmitLogConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MemberEmitLogConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MemberEmitLog__factory extends ContractFactory {
  constructor(...args: MemberEmitLogConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MemberEmitLog & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MemberEmitLog__factory {
    return super.connect(runner) as MemberEmitLog__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MemberEmitLogInterface {
    return new Interface(_abi) as MemberEmitLogInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MemberEmitLog {
    return new Contract(address, _abi, runner) as unknown as MemberEmitLog;
  }
}
